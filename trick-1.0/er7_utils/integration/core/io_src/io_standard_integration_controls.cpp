/**
 * This file was automatically generated by the ICG based on the file:
 * /users/agirish/trick_tutorial/trick/trick_source/er7_utils/integration/core/include/standard_integration_controls.hh
 * This file contains database parameter declarations specific to the
 * data structures and enumerated types declared in the above file.
 * These database parameters are used by the Trick input and
 * data recording processors to gain access to important simulation
 * variable information.
 */

#define TRICK_IN_IOSRC
#include <stdlib.h>
#include "trick/MemoryManager.hh"
#include "trick/attributes.h"
#include "trick/parameter_types.h"
#include "trick/ClassSizeCheck.hh"
#include "trick/UnitsMap.hh"
#include "trick/checkpoint_stl.hh"
#include "/users/agirish/trick_tutorial/trick/trick_source/er7_utils/integration/core/include/standard_integration_controls.hh"

extern "C" {

ATTRIBUTES attrer7_utils__StandardIntegrationControls[] = {
{"time_scale_factor", "double", "1", "", "",
  "n Ratio of dynamic delta time to simulation engine delta time.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  8, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"integ_starttime", "double", "1", "", "",
  "n The simulation time of the start of the current integration loop as requested by the simulation engine.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  16, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"integ_simdt", "double", "1", "", "",
  "n The simulation time span of the current integration loop as requested by the simulation engine.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  24, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"integ_dyndt", "double", "1", "", "",
  "n The dynamic time span corresponding to integ_simdt.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  32, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"integ_time_scale", "double", "1", "", "",
  "n The time scale factor, with 0.0 representing the start of the integration interval and 1.0 representing the end of the interval.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  40, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"integ_simtime", "double", "1", "", "",
  "n The current simulation time.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  48, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"transition_table", "unsigned int", "1", "", "",
  "n A number_stages array that directs the transitions from one integration stage to the next. The constructor for this class populates this array with values 1 (element 0) to number_stages (element number_stages-1).",
  15,TRICK_UNSIGNED_INTEGER, sizeof(unsigned int), 0, 0, Language_CPP, 4,
  56, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"step_number", "unsigned int", "1", "", "",
  "n Starts at zero at the start of a tour, increments by one per stage, and resets to zero at the end of a tour.",
  15,TRICK_UNSIGNED_INTEGER, sizeof(unsigned int), 0, 0, Language_CPP, 4,
  64, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"cycle_stage", "unsigned int", "1", "", "",
  "n The technique-specific finite state machine state number of the current stage. The cycle_stage starts at zero, nominally incrementing by one for each cycle, until it attains a value equal to the final_stage. At this point the cycle begins anew with a cycle_stage of zero.",
  15,TRICK_UNSIGNED_INTEGER, sizeof(unsigned int), 0, 0, Language_CPP, 4,
  68, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"final_stage", "unsigned int", "1", "", "",
  "n The stage number at which the cycle_stage resets to zero.",
  15,TRICK_UNSIGNED_INTEGER, sizeof(unsigned int), 0, 0, Language_CPP, 4,
  72, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"number_stages", "unsigned int", "1", "", "",
  "n The size of the transition table, nominally final_stage.",
  15,TRICK_UNSIGNED_INTEGER, sizeof(unsigned int), 0, 0, Language_CPP, 4,
  76, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"reset_needed", "bool", "1", "", "",
  "n Wen set, indicates that a reset needs to be performed at the start of the next integration cycle. The flag will be cleared when the reset is performed.",
  15,TRICK_BOOLEAN, sizeof(bool), 0, 0, Language_CPP, 4,
  80, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"cycle_starttime", "double", "1", "", "",
  "n The simulation engine time of the start of the current integration cycle as determined by start_integration_tour or end_integration_cycle. For single cycle integrators such as RK4, the cycle_starttime and cycle_simdt are equal to the integ_starttime and integ_simdt. Multi-cycle integrators such as Gauss-Jackson compute the cycle_starttime and cycle_simdt.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  88, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"cycle_simdt", "double", "1", "", "",
  "n The simulation engine time span of the current integration cycle as determined by start_integration_tour or end_integration_cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  96, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"cycle_dyndt", "double", "1", "", "",
  "n The JEOD dynamic time span corresponding to cycle_simdt.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  104, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"multi_cycle", "bool", "1", "", "",
  "n Always false for single-cycle integrators. Multi-cycle integrators must set this to true to operate in multi-cycle mode.",
  15,TRICK_BOOLEAN, sizeof(bool), 0, 0, Language_CPP, 4,
  112, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"alt_controls", "er7_utils::IntegrationControls", "1", "", "",
  "n An alternate controls, typically for priming, that acts as a stand-in for this integration controller.",
  15,TRICK_STRUCTURED, 0, 0, 0, Language_CPP, 4,
  120, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"", "", "1", "", "",
  "",
  15,TRICK_VOID, 0, 0, 0, Language_CPP, 0,
  0, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL} };

} //extern "C"

namespace er7_utils {

void init_attrer7_utils__StandardIntegrationControls() {

    static int initialized ;
    if (initialized) {
        return;
    }
    initialized = 1;

    trick_MM->add_attr_info(std::string(attrer7_utils__StandardIntegrationControls[16].type_name) , &attrer7_utils__StandardIntegrationControls[16], __FILE__ , __LINE__ ) ;

    ATTRIBUTES temp_attr ;

    trick_MM->add_attr_info( std::string("er7_utils::IntegrationControls"), &temp_attr , __FILE__ , __LINE__ ) ;
    trick_MM->add_attr_info( std::string("er7_utils::Er7UtilsDeletable"), &temp_attr , __FILE__ , __LINE__ ) ;
}
}

extern "C" {

void init_attrer7_utils__StandardIntegrationControls_c_intf() {
    er7_utils::init_attrer7_utils__StandardIntegrationControls() ;
}

size_t io_src_sizeof_er7_utils__StandardIntegrationControls() {
    return sizeof(er7_utils::StandardIntegrationControls) ;
}

void* io_src_allocate_er7_utils__StandardIntegrationControls(int num) {
    er7_utils::StandardIntegrationControls* temp = (er7_utils::StandardIntegrationControls*)calloc(num, sizeof(er7_utils::StandardIntegrationControls));
    for (int ii = 0; ii < num; ++ii) {
        new(&temp[ii]) er7_utils::StandardIntegrationControls();
    }
    return (void*)temp;
}

void io_src_destruct_er7_utils__StandardIntegrationControls(void* address __attribute__((unused)), int num __attribute__((unused))) {
    using namespace er7_utils;
    er7_utils::StandardIntegrationControls* temp = (er7_utils::StandardIntegrationControls*)address;
    for (int ii = 0; ii < num; ++ii) {
        temp[ii].~StandardIntegrationControls();
    }
}

void io_src_delete_er7_utils__StandardIntegrationControls(void* address) {
    delete (er7_utils::StandardIntegrationControls*)address;
}

} //extern "C"

struct UnitsMaper7_utils__StandardIntegrationControls {
    UnitsMaper7_utils__StandardIntegrationControls() {
        Trick::UnitsMap* units_map_ptr = Trick::UnitsMap::units_map();
        units_map_ptr->add_param("StandardIntegrationControls_time_scale_factor", "1") ;
        units_map_ptr->add_param("StandardIntegrationControls_integ_starttime", "1") ;
        units_map_ptr->add_param("StandardIntegrationControls_integ_simdt", "1") ;
        units_map_ptr->add_param("StandardIntegrationControls_integ_dyndt", "1") ;
        units_map_ptr->add_param("StandardIntegrationControls_integ_time_scale", "1") ;
        units_map_ptr->add_param("StandardIntegrationControls_integ_simtime", "1") ;
        units_map_ptr->add_param("StandardIntegrationControls_transition_table", "1") ;
        units_map_ptr->add_param("StandardIntegrationControls_step_number", "1") ;
        units_map_ptr->add_param("StandardIntegrationControls_cycle_stage", "1") ;
        units_map_ptr->add_param("StandardIntegrationControls_final_stage", "1") ;
        units_map_ptr->add_param("StandardIntegrationControls_number_stages", "1") ;
        units_map_ptr->add_param("StandardIntegrationControls_reset_needed", "1") ;
        units_map_ptr->add_param("StandardIntegrationControls_cycle_starttime", "1") ;
        units_map_ptr->add_param("StandardIntegrationControls_cycle_simdt", "1") ;
        units_map_ptr->add_param("StandardIntegrationControls_cycle_dyndt", "1") ;
        units_map_ptr->add_param("StandardIntegrationControls_multi_cycle", "1") ;
        units_map_ptr->add_param("StandardIntegrationControls_alt_controls", "1") ;
    }
} umer7_utils__StandardIntegrationControls;

