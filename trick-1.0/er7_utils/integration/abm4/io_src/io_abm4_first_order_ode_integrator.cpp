/**
 * This file was automatically generated by the ICG based on the file:
 * /users/agirish/trick_tutorial/trick/trick_source/er7_utils/integration/abm4/include/abm4_first_order_ode_integrator.hh
 * This file contains database parameter declarations specific to the
 * data structures and enumerated types declared in the above file.
 * These database parameters are used by the Trick input and
 * data recording processors to gain access to important simulation
 * variable information.
 */

#define TRICK_IN_IOSRC
#include <stdlib.h>
#include "trick/MemoryManager.hh"
#include "trick/attributes.h"
#include "trick/parameter_types.h"
#include "trick/ClassSizeCheck.hh"
#include "trick/UnitsMap.hh"
#include "trick/checkpoint_stl.hh"
#include "/users/agirish/trick_tutorial/trick/trick_source/er7_utils/integration/abm4/include/abm4_first_order_ode_integrator.hh"

extern "C" {

ATTRIBUTES attrer7_utils__ABM4FirstOrderODEIntegrator[] = {
{"state_size", "unsigned int", "1", "", "",
  "n The size of the state.",
  15,TRICK_UNSIGNED_INTEGER, sizeof(unsigned int), 0, 0, Language_CPP, 4,
  8, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"controls", "er7_utils::IntegrationControls", "1", "", "",
  "n The integration controls object that controls this state integrator.",
  15,TRICK_STRUCTURED, 0, 0, 0, Language_CPP, 4,
  16, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"primer", "er7_utils::FirstOrderODEIntegrator", "1", "", "",
  "n The state integrator used to prime this integrator.",
  15,TRICK_STRUCTURED, 0, 0, 0, Language_CPP, 4,
  24, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"priming_state_size", "int", "1", "", "",
  "n The number of start of cycle derivatives needed by the technique.",
  15,TRICK_INTEGER, sizeof(int), 0, 0, Language_CPP, 4,
  32, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"prime_counter", "int", "1", "", "",
  "n Priming phase countdown. This is set to priming_state_size initially and upon reset. Priming is complete when the counter reaches zero.",
  15,TRICK_INTEGER, sizeof(int), 0, 0, Language_CPP, 4,
  36, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"primed", "bool", "1", "", "",
  "n Indicates whether the object has been primed. This is false initially and upon reset; it is set to true when priming is complete.",
  15,TRICK_BOOLEAN, sizeof(bool), 0, 0, Language_CPP, 4,
  40, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"init_state", "double", "1", "", "",
  "n The state at the start of an integration cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  48, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"deriv_hist", "double", "1", "", "",
  "n The state derivatives at the start of current and at the starts of the three previous integration cycles. This array is rotated so that deriv_hist[0] contains the state derivatives at the start of the current cycle, deriv_hist[1] the derivatives at the start of the previous cycle, and so on.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  56, NULL, 2, {{4, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"", "", "1", "", "",
  "",
  15,TRICK_VOID, 0, 0, 0, Language_CPP, 0,
  0, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL} };

} //extern "C"

namespace er7_utils {

void init_attrer7_utils__ABM4FirstOrderODEIntegrator() {

    static int initialized ;
    if (initialized) {
        return;
    }
    initialized = 1;

    trick_MM->add_attr_info(std::string(attrer7_utils__ABM4FirstOrderODEIntegrator[1].type_name) , &attrer7_utils__ABM4FirstOrderODEIntegrator[1], __FILE__ , __LINE__ ) ;
    trick_MM->add_attr_info(std::string(attrer7_utils__ABM4FirstOrderODEIntegrator[2].type_name) , &attrer7_utils__ABM4FirstOrderODEIntegrator[2], __FILE__ , __LINE__ ) ;

    ATTRIBUTES temp_attr ;

    trick_MM->add_attr_info( std::string("er7_utils::PrimingFirstOrderODEIntegrator"), &temp_attr , __FILE__ , __LINE__ ) ;
    trick_MM->add_attr_info( std::string("er7_utils::Er7UtilsDeletable"), &temp_attr , __FILE__ , __LINE__ ) ;
}
}

extern "C" {

void init_attrer7_utils__ABM4FirstOrderODEIntegrator_c_intf() {
    er7_utils::init_attrer7_utils__ABM4FirstOrderODEIntegrator() ;
}

size_t io_src_sizeof_er7_utils__ABM4FirstOrderODEIntegrator() {
    return sizeof(er7_utils::ABM4FirstOrderODEIntegrator) ;
}

void* io_src_allocate_er7_utils__ABM4FirstOrderODEIntegrator(int num) {
    er7_utils::ABM4FirstOrderODEIntegrator* temp = (er7_utils::ABM4FirstOrderODEIntegrator*)calloc(num, sizeof(er7_utils::ABM4FirstOrderODEIntegrator));
    for (int ii = 0; ii < num; ++ii) {
        new(&temp[ii]) er7_utils::ABM4FirstOrderODEIntegrator();
    }
    return (void*)temp;
}

void io_src_destruct_er7_utils__ABM4FirstOrderODEIntegrator(void* address __attribute__((unused)), int num __attribute__((unused))) {
    using namespace er7_utils;
    er7_utils::ABM4FirstOrderODEIntegrator* temp = (er7_utils::ABM4FirstOrderODEIntegrator*)address;
    for (int ii = 0; ii < num; ++ii) {
        temp[ii].~ABM4FirstOrderODEIntegrator();
    }
}

void io_src_delete_er7_utils__ABM4FirstOrderODEIntegrator(void* address) {
    delete (er7_utils::ABM4FirstOrderODEIntegrator*)address;
}

} //extern "C"

struct UnitsMaper7_utils__ABM4FirstOrderODEIntegrator {
    UnitsMaper7_utils__ABM4FirstOrderODEIntegrator() {
        Trick::UnitsMap* units_map_ptr = Trick::UnitsMap::units_map();
        units_map_ptr->add_param("ABM4FirstOrderODEIntegrator_state_size", "1") ;
        units_map_ptr->add_param("ABM4FirstOrderODEIntegrator_controls", "1") ;
        units_map_ptr->add_param("ABM4FirstOrderODEIntegrator_primer", "1") ;
        units_map_ptr->add_param("ABM4FirstOrderODEIntegrator_priming_state_size", "1") ;
        units_map_ptr->add_param("ABM4FirstOrderODEIntegrator_prime_counter", "1") ;
        units_map_ptr->add_param("ABM4FirstOrderODEIntegrator_primed", "1") ;
        units_map_ptr->add_param("ABM4FirstOrderODEIntegrator_init_state", "1") ;
        units_map_ptr->add_param("ABM4FirstOrderODEIntegrator_deriv_hist", "1") ;
    }
} umer7_utils__ABM4FirstOrderODEIntegrator;

