/**
 * This file was automatically generated by the ICG based on the file:
 * /users/agirish/trick_tutorial/trick/trick_source/er7_utils/integration/abm4/include/abm4_integrator_constructor.hh
 * This file contains database parameter declarations specific to the
 * data structures and enumerated types declared in the above file.
 * These database parameters are used by the Trick input and
 * data recording processors to gain access to important simulation
 * variable information.
 */

#define TRICK_IN_IOSRC
#include <stdlib.h>
#include "trick/MemoryManager.hh"
#include "trick/attributes.h"
#include "trick/parameter_types.h"
#include "trick/ClassSizeCheck.hh"
#include "trick/UnitsMap.hh"
#include "trick/checkpoint_stl.hh"
#include "/users/agirish/trick_tutorial/trick/trick_source/er7_utils/integration/abm4/include/abm4_integrator_constructor.hh"

extern "C" {

ATTRIBUTES attrer7_utils__ABM4IntegratorConstructor[] = {
{"primer_constructor", "er7_utils::IntegratorConstructor", "1", "", "",
  "n Constructor used to create the primers.",
  15,TRICK_STRUCTURED, 0, 0, 0, Language_CPP, 4,
  8, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"", "", "1", "", "",
  "",
  15,TRICK_VOID, 0, 0, 0, Language_CPP, 0,
  0, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL} };

} //extern "C"

namespace er7_utils {

void init_attrer7_utils__ABM4IntegratorConstructor() {

    static int initialized ;
    if (initialized) {
        return;
    }
    initialized = 1;

    trick_MM->add_attr_info(std::string(attrer7_utils__ABM4IntegratorConstructor[0].type_name) , &attrer7_utils__ABM4IntegratorConstructor[0], __FILE__ , __LINE__ ) ;

    ATTRIBUTES temp_attr ;

    trick_MM->add_attr_info( std::string("er7_utils::PrimingIntegratorConstructor"), &temp_attr , __FILE__ , __LINE__ ) ;
    trick_MM->add_attr_info( std::string("er7_utils::Er7UtilsDeletable"), &temp_attr , __FILE__ , __LINE__ ) ;
}
}

extern "C" {

void init_attrer7_utils__ABM4IntegratorConstructor_c_intf() {
    er7_utils::init_attrer7_utils__ABM4IntegratorConstructor() ;
}

size_t io_src_sizeof_er7_utils__ABM4IntegratorConstructor() {
    return sizeof(er7_utils::ABM4IntegratorConstructor) ;
}

void* io_src_allocate_er7_utils__ABM4IntegratorConstructor(int num) {
    er7_utils::ABM4IntegratorConstructor* temp = (er7_utils::ABM4IntegratorConstructor*)calloc(num, sizeof(er7_utils::ABM4IntegratorConstructor));
    for (int ii = 0; ii < num; ++ii) {
        new(&temp[ii]) er7_utils::ABM4IntegratorConstructor();
    }
    return (void*)temp;
}

void io_src_destruct_er7_utils__ABM4IntegratorConstructor(void* address __attribute__((unused)), int num __attribute__((unused))) {
    using namespace er7_utils;
    er7_utils::ABM4IntegratorConstructor* temp = (er7_utils::ABM4IntegratorConstructor*)address;
    for (int ii = 0; ii < num; ++ii) {
        temp[ii].~ABM4IntegratorConstructor();
    }
}

void io_src_delete_er7_utils__ABM4IntegratorConstructor(void* address) {
    delete (er7_utils::ABM4IntegratorConstructor*)address;
}

} //extern "C"

struct UnitsMaper7_utils__ABM4IntegratorConstructor {
    UnitsMaper7_utils__ABM4IntegratorConstructor() {
        Trick::UnitsMap* units_map_ptr = Trick::UnitsMap::units_map();
        units_map_ptr->add_param("ABM4IntegratorConstructor_primer_constructor", "1") ;
    }
} umer7_utils__ABM4IntegratorConstructor;

