/**
 * This file was automatically generated by the ICG based on the file:
 * /users/agirish/trick_tutorial/trick/trick_source/er7_utils/integration/abm4/include/abm4_second_order_ode_integrator.hh
 * This file contains database parameter declarations specific to the
 * data structures and enumerated types declared in the above file.
 * These database parameters are used by the Trick input and
 * data recording processors to gain access to important simulation
 * variable information.
 */

#define TRICK_IN_IOSRC
#include <stdlib.h>
#include "trick/MemoryManager.hh"
#include "trick/attributes.h"
#include "trick/parameter_types.h"
#include "trick/ClassSizeCheck.hh"
#include "trick/UnitsMap.hh"
#include "trick/checkpoint_stl.hh"
#include "/users/agirish/trick_tutorial/trick/trick_source/er7_utils/integration/abm4/include/abm4_second_order_ode_integrator.hh"

extern "C" {

ATTRIBUTES attrer7_utils__ABM4SecondOrderODEIntegrator[] = {
{"state_size", "int", "1", "", "",
  "n The sizes of the generalized position and generalized velocity vectors.",
  15,TRICK_INTEGER, sizeof(int), 0, 0, Language_CPP, 4,
  40, NULL, 1, {{2, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"problem_type", "er7_utils::Integration::ODEProblemType", "1", "", "",
  "n The type of problem to be solved.",
  15,TRICK_ENUMERATED, 0, 0, 0, Language_CPP, 4,
  48, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"controls", "er7_utils::IntegrationControls", "1", "", "",
  "n The integration controls object that controls this state integrator.",
  15,TRICK_STRUCTURED, 0, 0, 0, Language_CPP, 4,
  56, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"primer", "er7_utils::SecondOrderODEIntegrator", "1", "", "",
  "n The state integrator used to prime this integrator.",
  15,TRICK_STRUCTURED, 0, 0, 0, Language_CPP, 4,
  64, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"priming_state_size", "int", "1", "", "",
  "n The number of start of cycle derivatives needed by the technique.",
  15,TRICK_INTEGER, sizeof(int), 0, 0, Language_CPP, 4,
  72, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"prime_counter", "int", "1", "", "",
  "n Priming phase countdown. This is set to priming_state_size initially and upon reset. Priming is complete when the counter reaches zero.",
  15,TRICK_INTEGER, sizeof(int), 0, 0, Language_CPP, 4,
  76, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"primed", "bool", "1", "", "",
  "n Indicates whether the object has been primed. This is false initially and upon reset; it is set to true when priming is complete.",
  15,TRICK_BOOLEAN, sizeof(bool), 0, 0, Language_CPP, 4,
  80, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"init_pos", "double", "1", "", "",
  "n Position at the start of an integration cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  88, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"init_vel", "double", "1", "", "",
  "n Velocity at the start of an integration cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  96, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"posdot", "double", "1", "", "",
  "n Position derivative at the current time step.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  104, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"posdot_hist", "double", "1", "", "",
  "n Position derivatives at each step in the integration cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  112, NULL, 2, {{4, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"posdot_hist_anchor", "double", "1", "", "",
  "n Cached pointer to the data needed for deletion after PDH is rotated",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  144, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"veldot_hist", "double", "1", "", "",
  "n Velocity derivatives at each step in the integration cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  152, NULL, 2, {{4, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"veldot_hist_anchor", "double", "1", "", "",
  "n Cached pointer to the data needed for deletion after VDH is rotated",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  184, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"", "", "1", "", "",
  "",
  15,TRICK_VOID, 0, 0, 0, Language_CPP, 0,
  0, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL} };

} //extern "C"

namespace er7_utils {

void init_attrer7_utils__ABM4SecondOrderODEIntegrator() {

    static int initialized ;
    if (initialized) {
        return;
    }
    initialized = 1;

    trick_MM->add_attr_info(std::string(attrer7_utils__ABM4SecondOrderODEIntegrator[1].type_name) , &attrer7_utils__ABM4SecondOrderODEIntegrator[1], __FILE__ , __LINE__ ) ;
    trick_MM->add_attr_info(std::string(attrer7_utils__ABM4SecondOrderODEIntegrator[2].type_name) , &attrer7_utils__ABM4SecondOrderODEIntegrator[2], __FILE__ , __LINE__ ) ;
    trick_MM->add_attr_info(std::string(attrer7_utils__ABM4SecondOrderODEIntegrator[3].type_name) , &attrer7_utils__ABM4SecondOrderODEIntegrator[3], __FILE__ , __LINE__ ) ;

    ATTRIBUTES temp_attr ;

    trick_MM->add_attr_info( std::string("er7_utils::PrimingSecondOrderODEIntegrator"), &temp_attr , __FILE__ , __LINE__ ) ;
    trick_MM->add_attr_info( std::string("er7_utils::Er7UtilsDeletable"), &temp_attr , __FILE__ , __LINE__ ) ;
}
}

extern "C" {

void init_attrer7_utils__ABM4SecondOrderODEIntegrator_c_intf() {
    er7_utils::init_attrer7_utils__ABM4SecondOrderODEIntegrator() ;
}

size_t io_src_sizeof_er7_utils__ABM4SecondOrderODEIntegrator() {
    return sizeof(er7_utils::ABM4SecondOrderODEIntegrator) ;
}

void io_src_destruct_er7_utils__ABM4SecondOrderODEIntegrator(void* address __attribute__((unused)), int num __attribute__((unused))) {
    using namespace er7_utils;
    er7_utils::ABM4SecondOrderODEIntegrator* temp = (er7_utils::ABM4SecondOrderODEIntegrator*)address;
    for (int ii = 0; ii < num; ++ii) {
        temp[ii].~ABM4SecondOrderODEIntegrator();
    }
}

void io_src_delete_er7_utils__ABM4SecondOrderODEIntegrator(void* address) {
    delete (er7_utils::ABM4SecondOrderODEIntegrator*)address;
}

} //extern "C"

struct UnitsMaper7_utils__ABM4SecondOrderODEIntegrator {
    UnitsMaper7_utils__ABM4SecondOrderODEIntegrator() {
        Trick::UnitsMap* units_map_ptr = Trick::UnitsMap::units_map();
        units_map_ptr->add_param("ABM4SecondOrderODEIntegrator_state_size", "1") ;
        units_map_ptr->add_param("ABM4SecondOrderODEIntegrator_problem_type", "1") ;
        units_map_ptr->add_param("ABM4SecondOrderODEIntegrator_controls", "1") ;
        units_map_ptr->add_param("ABM4SecondOrderODEIntegrator_primer", "1") ;
        units_map_ptr->add_param("ABM4SecondOrderODEIntegrator_priming_state_size", "1") ;
        units_map_ptr->add_param("ABM4SecondOrderODEIntegrator_prime_counter", "1") ;
        units_map_ptr->add_param("ABM4SecondOrderODEIntegrator_primed", "1") ;
        units_map_ptr->add_param("ABM4SecondOrderODEIntegrator_init_pos", "1") ;
        units_map_ptr->add_param("ABM4SecondOrderODEIntegrator_init_vel", "1") ;
        units_map_ptr->add_param("ABM4SecondOrderODEIntegrator_posdot", "1") ;
        units_map_ptr->add_param("ABM4SecondOrderODEIntegrator_posdot_hist", "1") ;
        units_map_ptr->add_param("ABM4SecondOrderODEIntegrator_posdot_hist_anchor", "1") ;
        units_map_ptr->add_param("ABM4SecondOrderODEIntegrator_veldot_hist", "1") ;
        units_map_ptr->add_param("ABM4SecondOrderODEIntegrator_veldot_hist_anchor", "1") ;
    }
} umer7_utils__ABM4SecondOrderODEIntegrator;

extern "C" {

ATTRIBUTES attrer7_utils__ABM4SimpleSecondOrderODEIntegrator[] = {
{"state_size", "int", "1", "", "",
  "n The sizes of the generalized position and generalized velocity vectors.",
  15,TRICK_INTEGER, sizeof(int), 0, 0, Language_CPP, 4,
  40, NULL, 1, {{2, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"problem_type", "er7_utils::Integration::ODEProblemType", "1", "", "",
  "n The type of problem to be solved.",
  15,TRICK_ENUMERATED, 0, 0, 0, Language_CPP, 4,
  48, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"controls", "er7_utils::IntegrationControls", "1", "", "",
  "n The integration controls object that controls this state integrator.",
  15,TRICK_STRUCTURED, 0, 0, 0, Language_CPP, 4,
  56, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"primer", "er7_utils::SecondOrderODEIntegrator", "1", "", "",
  "n The state integrator used to prime this integrator.",
  15,TRICK_STRUCTURED, 0, 0, 0, Language_CPP, 4,
  64, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"priming_state_size", "int", "1", "", "",
  "n The number of start of cycle derivatives needed by the technique.",
  15,TRICK_INTEGER, sizeof(int), 0, 0, Language_CPP, 4,
  72, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"prime_counter", "int", "1", "", "",
  "n Priming phase countdown. This is set to priming_state_size initially and upon reset. Priming is complete when the counter reaches zero.",
  15,TRICK_INTEGER, sizeof(int), 0, 0, Language_CPP, 4,
  76, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"primed", "bool", "1", "", "",
  "n Indicates whether the object has been primed. This is false initially and upon reset; it is set to true when priming is complete.",
  15,TRICK_BOOLEAN, sizeof(bool), 0, 0, Language_CPP, 4,
  80, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"init_pos", "double", "1", "", "",
  "n Position at the start of an integration cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  88, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"init_vel", "double", "1", "", "",
  "n Velocity at the start of an integration cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  96, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"posdot", "double", "1", "", "",
  "n Position derivative at the current time step.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  104, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"posdot_hist", "double", "1", "", "",
  "n Position derivatives at each step in the integration cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  112, NULL, 2, {{4, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"posdot_hist_anchor", "double", "1", "", "",
  "n Cached pointer to the data needed for deletion after PDH is rotated",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  144, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"veldot_hist", "double", "1", "", "",
  "n Velocity derivatives at each step in the integration cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  152, NULL, 2, {{4, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"veldot_hist_anchor", "double", "1", "", "",
  "n Cached pointer to the data needed for deletion after VDH is rotated",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  184, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"", "", "1", "", "",
  "",
  15,TRICK_VOID, 0, 0, 0, Language_CPP, 0,
  0, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL} };

} //extern "C"

namespace er7_utils {

void init_attrer7_utils__ABM4SimpleSecondOrderODEIntegrator() {

    static int initialized ;
    if (initialized) {
        return;
    }
    initialized = 1;

    trick_MM->add_attr_info(std::string(attrer7_utils__ABM4SimpleSecondOrderODEIntegrator[1].type_name) , &attrer7_utils__ABM4SimpleSecondOrderODEIntegrator[1], __FILE__ , __LINE__ ) ;
    trick_MM->add_attr_info(std::string(attrer7_utils__ABM4SimpleSecondOrderODEIntegrator[2].type_name) , &attrer7_utils__ABM4SimpleSecondOrderODEIntegrator[2], __FILE__ , __LINE__ ) ;
    trick_MM->add_attr_info(std::string(attrer7_utils__ABM4SimpleSecondOrderODEIntegrator[3].type_name) , &attrer7_utils__ABM4SimpleSecondOrderODEIntegrator[3], __FILE__ , __LINE__ ) ;

    ATTRIBUTES temp_attr ;

    trick_MM->add_attr_info( std::string("er7_utils::ABM4SecondOrderODEIntegrator"), &temp_attr , __FILE__ , __LINE__ ) ;
    trick_MM->add_attr_info( std::string("er7_utils::Er7UtilsDeletable"), &temp_attr , __FILE__ , __LINE__ ) ;
}
}

extern "C" {

void init_attrer7_utils__ABM4SimpleSecondOrderODEIntegrator_c_intf() {
    er7_utils::init_attrer7_utils__ABM4SimpleSecondOrderODEIntegrator() ;
}

size_t io_src_sizeof_er7_utils__ABM4SimpleSecondOrderODEIntegrator() {
    return sizeof(er7_utils::ABM4SimpleSecondOrderODEIntegrator) ;
}

void* io_src_allocate_er7_utils__ABM4SimpleSecondOrderODEIntegrator(int num) {
    er7_utils::ABM4SimpleSecondOrderODEIntegrator* temp = (er7_utils::ABM4SimpleSecondOrderODEIntegrator*)calloc(num, sizeof(er7_utils::ABM4SimpleSecondOrderODEIntegrator));
    for (int ii = 0; ii < num; ++ii) {
        new(&temp[ii]) er7_utils::ABM4SimpleSecondOrderODEIntegrator();
    }
    return (void*)temp;
}

void io_src_destruct_er7_utils__ABM4SimpleSecondOrderODEIntegrator(void* address __attribute__((unused)), int num __attribute__((unused))) {
    using namespace er7_utils;
    er7_utils::ABM4SimpleSecondOrderODEIntegrator* temp = (er7_utils::ABM4SimpleSecondOrderODEIntegrator*)address;
    for (int ii = 0; ii < num; ++ii) {
        temp[ii].~ABM4SimpleSecondOrderODEIntegrator();
    }
}

void io_src_delete_er7_utils__ABM4SimpleSecondOrderODEIntegrator(void* address) {
    delete (er7_utils::ABM4SimpleSecondOrderODEIntegrator*)address;
}

} //extern "C"

struct UnitsMaper7_utils__ABM4SimpleSecondOrderODEIntegrator {
    UnitsMaper7_utils__ABM4SimpleSecondOrderODEIntegrator() {
        Trick::UnitsMap* units_map_ptr = Trick::UnitsMap::units_map();
        units_map_ptr->add_param("ABM4SimpleSecondOrderODEIntegrator_state_size", "1") ;
        units_map_ptr->add_param("ABM4SimpleSecondOrderODEIntegrator_problem_type", "1") ;
        units_map_ptr->add_param("ABM4SimpleSecondOrderODEIntegrator_controls", "1") ;
        units_map_ptr->add_param("ABM4SimpleSecondOrderODEIntegrator_primer", "1") ;
        units_map_ptr->add_param("ABM4SimpleSecondOrderODEIntegrator_priming_state_size", "1") ;
        units_map_ptr->add_param("ABM4SimpleSecondOrderODEIntegrator_prime_counter", "1") ;
        units_map_ptr->add_param("ABM4SimpleSecondOrderODEIntegrator_primed", "1") ;
        units_map_ptr->add_param("ABM4SimpleSecondOrderODEIntegrator_init_pos", "1") ;
        units_map_ptr->add_param("ABM4SimpleSecondOrderODEIntegrator_init_vel", "1") ;
        units_map_ptr->add_param("ABM4SimpleSecondOrderODEIntegrator_posdot", "1") ;
        units_map_ptr->add_param("ABM4SimpleSecondOrderODEIntegrator_posdot_hist", "1") ;
        units_map_ptr->add_param("ABM4SimpleSecondOrderODEIntegrator_posdot_hist_anchor", "1") ;
        units_map_ptr->add_param("ABM4SimpleSecondOrderODEIntegrator_veldot_hist", "1") ;
        units_map_ptr->add_param("ABM4SimpleSecondOrderODEIntegrator_veldot_hist_anchor", "1") ;
    }
} umer7_utils__ABM4SimpleSecondOrderODEIntegrator;

extern "C" {

ATTRIBUTES attrer7_utils__ABM4GeneralizedDerivSecondOrderODEIntegrator[] = {
{"state_size", "int", "1", "", "",
  "n The sizes of the generalized position and generalized velocity vectors.",
  15,TRICK_INTEGER, sizeof(int), 0, 0, Language_CPP, 4,
  40, NULL, 1, {{2, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"problem_type", "er7_utils::Integration::ODEProblemType", "1", "", "",
  "n The type of problem to be solved.",
  15,TRICK_ENUMERATED, 0, 0, 0, Language_CPP, 4,
  48, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"controls", "er7_utils::IntegrationControls", "1", "", "",
  "n The integration controls object that controls this state integrator.",
  15,TRICK_STRUCTURED, 0, 0, 0, Language_CPP, 4,
  56, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"primer", "er7_utils::SecondOrderODEIntegrator", "1", "", "",
  "n The state integrator used to prime this integrator.",
  15,TRICK_STRUCTURED, 0, 0, 0, Language_CPP, 4,
  64, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"priming_state_size", "int", "1", "", "",
  "n The number of start of cycle derivatives needed by the technique.",
  15,TRICK_INTEGER, sizeof(int), 0, 0, Language_CPP, 4,
  72, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"prime_counter", "int", "1", "", "",
  "n Priming phase countdown. This is set to priming_state_size initially and upon reset. Priming is complete when the counter reaches zero.",
  15,TRICK_INTEGER, sizeof(int), 0, 0, Language_CPP, 4,
  76, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"primed", "bool", "1", "", "",
  "n Indicates whether the object has been primed. This is false initially and upon reset; it is set to true when priming is complete.",
  15,TRICK_BOOLEAN, sizeof(bool), 0, 0, Language_CPP, 4,
  80, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"init_pos", "double", "1", "", "",
  "n Position at the start of an integration cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  88, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"init_vel", "double", "1", "", "",
  "n Velocity at the start of an integration cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  96, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"posdot", "double", "1", "", "",
  "n Position derivative at the current time step.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  104, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"posdot_hist", "double", "1", "", "",
  "n Position derivatives at each step in the integration cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  112, NULL, 2, {{4, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"posdot_hist_anchor", "double", "1", "", "",
  "n Cached pointer to the data needed for deletion after PDH is rotated",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  144, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"veldot_hist", "double", "1", "", "",
  "n Velocity derivatives at each step in the integration cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  152, NULL, 2, {{4, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"veldot_hist_anchor", "double", "1", "", "",
  "n Cached pointer to the data needed for deletion after VDH is rotated",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  184, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"", "", "1", "", "",
  "",
  15,TRICK_VOID, 0, 0, 0, Language_CPP, 0,
  0, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL} };

} //extern "C"

namespace er7_utils {

void init_attrer7_utils__ABM4GeneralizedDerivSecondOrderODEIntegrator() {

    static int initialized ;
    if (initialized) {
        return;
    }
    initialized = 1;

    trick_MM->add_attr_info(std::string(attrer7_utils__ABM4GeneralizedDerivSecondOrderODEIntegrator[1].type_name) , &attrer7_utils__ABM4GeneralizedDerivSecondOrderODEIntegrator[1], __FILE__ , __LINE__ ) ;
    trick_MM->add_attr_info(std::string(attrer7_utils__ABM4GeneralizedDerivSecondOrderODEIntegrator[2].type_name) , &attrer7_utils__ABM4GeneralizedDerivSecondOrderODEIntegrator[2], __FILE__ , __LINE__ ) ;
    trick_MM->add_attr_info(std::string(attrer7_utils__ABM4GeneralizedDerivSecondOrderODEIntegrator[3].type_name) , &attrer7_utils__ABM4GeneralizedDerivSecondOrderODEIntegrator[3], __FILE__ , __LINE__ ) ;

    ATTRIBUTES temp_attr ;

    trick_MM->add_attr_info( std::string("er7_utils::ABM4SecondOrderODEIntegrator"), &temp_attr , __FILE__ , __LINE__ ) ;
    trick_MM->add_attr_info( std::string("er7_utils::Er7UtilsDeletable"), &temp_attr , __FILE__ , __LINE__ ) ;
}
}

extern "C" {

void init_attrer7_utils__ABM4GeneralizedDerivSecondOrderODEIntegrator_c_intf() {
    er7_utils::init_attrer7_utils__ABM4GeneralizedDerivSecondOrderODEIntegrator() ;
}

size_t io_src_sizeof_er7_utils__ABM4GeneralizedDerivSecondOrderODEIntegrator() {
    return sizeof(er7_utils::ABM4GeneralizedDerivSecondOrderODEIntegrator) ;
}

void* io_src_allocate_er7_utils__ABM4GeneralizedDerivSecondOrderODEIntegrator(int num) {
    er7_utils::ABM4GeneralizedDerivSecondOrderODEIntegrator* temp = (er7_utils::ABM4GeneralizedDerivSecondOrderODEIntegrator*)calloc(num, sizeof(er7_utils::ABM4GeneralizedDerivSecondOrderODEIntegrator));
    for (int ii = 0; ii < num; ++ii) {
        new(&temp[ii]) er7_utils::ABM4GeneralizedDerivSecondOrderODEIntegrator();
    }
    return (void*)temp;
}

void io_src_destruct_er7_utils__ABM4GeneralizedDerivSecondOrderODEIntegrator(void* address __attribute__((unused)), int num __attribute__((unused))) {
    using namespace er7_utils;
    er7_utils::ABM4GeneralizedDerivSecondOrderODEIntegrator* temp = (er7_utils::ABM4GeneralizedDerivSecondOrderODEIntegrator*)address;
    for (int ii = 0; ii < num; ++ii) {
        temp[ii].~ABM4GeneralizedDerivSecondOrderODEIntegrator();
    }
}

void io_src_delete_er7_utils__ABM4GeneralizedDerivSecondOrderODEIntegrator(void* address) {
    delete (er7_utils::ABM4GeneralizedDerivSecondOrderODEIntegrator*)address;
}

} //extern "C"

struct UnitsMaper7_utils__ABM4GeneralizedDerivSecondOrderODEIntegrator {
    UnitsMaper7_utils__ABM4GeneralizedDerivSecondOrderODEIntegrator() {
        Trick::UnitsMap* units_map_ptr = Trick::UnitsMap::units_map();
        units_map_ptr->add_param("ABM4GeneralizedDerivSecondOrderODEIntegrator_state_size", "1") ;
        units_map_ptr->add_param("ABM4GeneralizedDerivSecondOrderODEIntegrator_problem_type", "1") ;
        units_map_ptr->add_param("ABM4GeneralizedDerivSecondOrderODEIntegrator_controls", "1") ;
        units_map_ptr->add_param("ABM4GeneralizedDerivSecondOrderODEIntegrator_primer", "1") ;
        units_map_ptr->add_param("ABM4GeneralizedDerivSecondOrderODEIntegrator_priming_state_size", "1") ;
        units_map_ptr->add_param("ABM4GeneralizedDerivSecondOrderODEIntegrator_prime_counter", "1") ;
        units_map_ptr->add_param("ABM4GeneralizedDerivSecondOrderODEIntegrator_primed", "1") ;
        units_map_ptr->add_param("ABM4GeneralizedDerivSecondOrderODEIntegrator_init_pos", "1") ;
        units_map_ptr->add_param("ABM4GeneralizedDerivSecondOrderODEIntegrator_init_vel", "1") ;
        units_map_ptr->add_param("ABM4GeneralizedDerivSecondOrderODEIntegrator_posdot", "1") ;
        units_map_ptr->add_param("ABM4GeneralizedDerivSecondOrderODEIntegrator_posdot_hist", "1") ;
        units_map_ptr->add_param("ABM4GeneralizedDerivSecondOrderODEIntegrator_posdot_hist_anchor", "1") ;
        units_map_ptr->add_param("ABM4GeneralizedDerivSecondOrderODEIntegrator_veldot_hist", "1") ;
        units_map_ptr->add_param("ABM4GeneralizedDerivSecondOrderODEIntegrator_veldot_hist_anchor", "1") ;
    }
} umer7_utils__ABM4GeneralizedDerivSecondOrderODEIntegrator;

