/**
 * This file was automatically generated by the ICG based on the file:
 * /users/agirish/trick_tutorial/trick/trick_source/er7_utils/integration/rkf78/include/rkf78_second_order_ode_integrator.hh
 * This file contains database parameter declarations specific to the
 * data structures and enumerated types declared in the above file.
 * These database parameters are used by the Trick input and
 * data recording processors to gain access to important simulation
 * variable information.
 */

#define TRICK_IN_IOSRC
#include <stdlib.h>
#include "trick/MemoryManager.hh"
#include "trick/attributes.h"
#include "trick/parameter_types.h"
#include "trick/ClassSizeCheck.hh"
#include "trick/UnitsMap.hh"
#include "trick/checkpoint_stl.hh"
#include "/users/agirish/trick_tutorial/trick/trick_source/er7_utils/integration/rkf78/include/rkf78_second_order_ode_integrator.hh"

extern "C" {

ATTRIBUTES attrer7_utils__RKFehlberg78SecondOrderODEIntegrator[] = {
{"state_size", "int", "1", "", "",
  "n The sizes of the generalized position and generalized velocity vectors.",
  15,TRICK_INTEGER, sizeof(int), 0, 0, Language_CPP, 4,
  40, NULL, 1, {{2, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"problem_type", "er7_utils::Integration::ODEProblemType", "1", "", "",
  "n The type of problem to be solved.",
  15,TRICK_ENUMERATED, 0, 0, 0, Language_CPP, 4,
  48, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"init_pos", "double", "1", "", "",
  "n Position at the start of an integration cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  56, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"init_vel", "double", "1", "", "",
  "n Velocity at the start of an integration cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  64, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"dtheta", "double", "1", "", "",
  "n Product of delta t and weighted sum of generalized velocities.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  72, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"posdot_hist", "double", "1", "", "",
  "n Position derivatives at each step in the integration cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  80, NULL, 2, {{13, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"veldot_hist", "double", "1", "", "",
  "n Velocity derivatives at each step in the integration cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  184, NULL, 2, {{13, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"", "", "1", "", "",
  "",
  15,TRICK_VOID, 0, 0, 0, Language_CPP, 0,
  0, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL} };

} //extern "C"

namespace er7_utils {

void init_attrer7_utils__RKFehlberg78SecondOrderODEIntegrator() {

    static int initialized ;
    if (initialized) {
        return;
    }
    initialized = 1;

    trick_MM->add_attr_info(std::string(attrer7_utils__RKFehlberg78SecondOrderODEIntegrator[1].type_name) , &attrer7_utils__RKFehlberg78SecondOrderODEIntegrator[1], __FILE__ , __LINE__ ) ;

    ATTRIBUTES temp_attr ;

    trick_MM->add_attr_info( std::string("er7_utils::SecondOrderODEIntegrator"), &temp_attr , __FILE__ , __LINE__ ) ;
    trick_MM->add_attr_info( std::string("er7_utils::Er7UtilsDeletable"), &temp_attr , __FILE__ , __LINE__ ) ;
}
}

extern "C" {

void init_attrer7_utils__RKFehlberg78SecondOrderODEIntegrator_c_intf() {
    er7_utils::init_attrer7_utils__RKFehlberg78SecondOrderODEIntegrator() ;
}

size_t io_src_sizeof_er7_utils__RKFehlberg78SecondOrderODEIntegrator() {
    return sizeof(er7_utils::RKFehlberg78SecondOrderODEIntegrator) ;
}

void io_src_destruct_er7_utils__RKFehlberg78SecondOrderODEIntegrator(void* address __attribute__((unused)), int num __attribute__((unused))) {
    using namespace er7_utils;
    er7_utils::RKFehlberg78SecondOrderODEIntegrator* temp = (er7_utils::RKFehlberg78SecondOrderODEIntegrator*)address;
    for (int ii = 0; ii < num; ++ii) {
        temp[ii].~RKFehlberg78SecondOrderODEIntegrator();
    }
}

void io_src_delete_er7_utils__RKFehlberg78SecondOrderODEIntegrator(void* address) {
    delete (er7_utils::RKFehlberg78SecondOrderODEIntegrator*)address;
}

} //extern "C"

struct UnitsMaper7_utils__RKFehlberg78SecondOrderODEIntegrator {
    UnitsMaper7_utils__RKFehlberg78SecondOrderODEIntegrator() {
        Trick::UnitsMap* units_map_ptr = Trick::UnitsMap::units_map();
        units_map_ptr->add_param("RKFehlberg78SecondOrderODEIntegrator_state_size", "1") ;
        units_map_ptr->add_param("RKFehlberg78SecondOrderODEIntegrator_problem_type", "1") ;
        units_map_ptr->add_param("RKFehlberg78SecondOrderODEIntegrator_init_pos", "1") ;
        units_map_ptr->add_param("RKFehlberg78SecondOrderODEIntegrator_init_vel", "1") ;
        units_map_ptr->add_param("RKFehlberg78SecondOrderODEIntegrator_dtheta", "1") ;
        units_map_ptr->add_param("RKFehlberg78SecondOrderODEIntegrator_posdot_hist", "1") ;
        units_map_ptr->add_param("RKFehlberg78SecondOrderODEIntegrator_veldot_hist", "1") ;
    }
} umer7_utils__RKFehlberg78SecondOrderODEIntegrator;

extern "C" {

ATTRIBUTES attrer7_utils__RKFehlberg78SimpleSecondOrderODEIntegrator[] = {
{"state_size", "int", "1", "", "",
  "n The sizes of the generalized position and generalized velocity vectors.",
  15,TRICK_INTEGER, sizeof(int), 0, 0, Language_CPP, 4,
  40, NULL, 1, {{2, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"problem_type", "er7_utils::Integration::ODEProblemType", "1", "", "",
  "n The type of problem to be solved.",
  15,TRICK_ENUMERATED, 0, 0, 0, Language_CPP, 4,
  48, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"init_pos", "double", "1", "", "",
  "n Position at the start of an integration cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  56, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"init_vel", "double", "1", "", "",
  "n Velocity at the start of an integration cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  64, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"dtheta", "double", "1", "", "",
  "n Product of delta t and weighted sum of generalized velocities.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  72, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"posdot_hist", "double", "1", "", "",
  "n Position derivatives at each step in the integration cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  80, NULL, 2, {{13, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"veldot_hist", "double", "1", "", "",
  "n Velocity derivatives at each step in the integration cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  184, NULL, 2, {{13, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"", "", "1", "", "",
  "",
  15,TRICK_VOID, 0, 0, 0, Language_CPP, 0,
  0, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL} };

} //extern "C"

namespace er7_utils {

void init_attrer7_utils__RKFehlberg78SimpleSecondOrderODEIntegrator() {

    static int initialized ;
    if (initialized) {
        return;
    }
    initialized = 1;

    trick_MM->add_attr_info(std::string(attrer7_utils__RKFehlberg78SimpleSecondOrderODEIntegrator[1].type_name) , &attrer7_utils__RKFehlberg78SimpleSecondOrderODEIntegrator[1], __FILE__ , __LINE__ ) ;

    ATTRIBUTES temp_attr ;

    trick_MM->add_attr_info( std::string("er7_utils::RKFehlberg78SecondOrderODEIntegrator"), &temp_attr , __FILE__ , __LINE__ ) ;
    trick_MM->add_attr_info( std::string("er7_utils::Er7UtilsDeletable"), &temp_attr , __FILE__ , __LINE__ ) ;
}
}

extern "C" {

void init_attrer7_utils__RKFehlberg78SimpleSecondOrderODEIntegrator_c_intf() {
    er7_utils::init_attrer7_utils__RKFehlberg78SimpleSecondOrderODEIntegrator() ;
}

size_t io_src_sizeof_er7_utils__RKFehlberg78SimpleSecondOrderODEIntegrator() {
    return sizeof(er7_utils::RKFehlberg78SimpleSecondOrderODEIntegrator) ;
}

void* io_src_allocate_er7_utils__RKFehlberg78SimpleSecondOrderODEIntegrator(int num) {
    er7_utils::RKFehlberg78SimpleSecondOrderODEIntegrator* temp = (er7_utils::RKFehlberg78SimpleSecondOrderODEIntegrator*)calloc(num, sizeof(er7_utils::RKFehlberg78SimpleSecondOrderODEIntegrator));
    for (int ii = 0; ii < num; ++ii) {
        new(&temp[ii]) er7_utils::RKFehlberg78SimpleSecondOrderODEIntegrator();
    }
    return (void*)temp;
}

void io_src_destruct_er7_utils__RKFehlberg78SimpleSecondOrderODEIntegrator(void* address __attribute__((unused)), int num __attribute__((unused))) {
    using namespace er7_utils;
    er7_utils::RKFehlberg78SimpleSecondOrderODEIntegrator* temp = (er7_utils::RKFehlberg78SimpleSecondOrderODEIntegrator*)address;
    for (int ii = 0; ii < num; ++ii) {
        temp[ii].~RKFehlberg78SimpleSecondOrderODEIntegrator();
    }
}

void io_src_delete_er7_utils__RKFehlberg78SimpleSecondOrderODEIntegrator(void* address) {
    delete (er7_utils::RKFehlberg78SimpleSecondOrderODEIntegrator*)address;
}

} //extern "C"

struct UnitsMaper7_utils__RKFehlberg78SimpleSecondOrderODEIntegrator {
    UnitsMaper7_utils__RKFehlberg78SimpleSecondOrderODEIntegrator() {
        Trick::UnitsMap* units_map_ptr = Trick::UnitsMap::units_map();
        units_map_ptr->add_param("RKFehlberg78SimpleSecondOrderODEIntegrator_state_size", "1") ;
        units_map_ptr->add_param("RKFehlberg78SimpleSecondOrderODEIntegrator_problem_type", "1") ;
        units_map_ptr->add_param("RKFehlberg78SimpleSecondOrderODEIntegrator_init_pos", "1") ;
        units_map_ptr->add_param("RKFehlberg78SimpleSecondOrderODEIntegrator_init_vel", "1") ;
        units_map_ptr->add_param("RKFehlberg78SimpleSecondOrderODEIntegrator_dtheta", "1") ;
        units_map_ptr->add_param("RKFehlberg78SimpleSecondOrderODEIntegrator_posdot_hist", "1") ;
        units_map_ptr->add_param("RKFehlberg78SimpleSecondOrderODEIntegrator_veldot_hist", "1") ;
    }
} umer7_utils__RKFehlberg78SimpleSecondOrderODEIntegrator;

extern "C" {

ATTRIBUTES attrer7_utils__RKFehlberg78GeneralizedDerivSecondOrderODEIntegrator[] = {
{"state_size", "int", "1", "", "",
  "n The sizes of the generalized position and generalized velocity vectors.",
  15,TRICK_INTEGER, sizeof(int), 0, 0, Language_CPP, 4,
  40, NULL, 1, {{2, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"problem_type", "er7_utils::Integration::ODEProblemType", "1", "", "",
  "n The type of problem to be solved.",
  15,TRICK_ENUMERATED, 0, 0, 0, Language_CPP, 4,
  48, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"init_pos", "double", "1", "", "",
  "n Position at the start of an integration cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  56, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"init_vel", "double", "1", "", "",
  "n Velocity at the start of an integration cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  64, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"dtheta", "double", "1", "", "",
  "n Product of delta t and weighted sum of generalized velocities.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  72, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"posdot_hist", "double", "1", "", "",
  "n Position derivatives at each step in the integration cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  80, NULL, 2, {{13, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"veldot_hist", "double", "1", "", "",
  "n Velocity derivatives at each step in the integration cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  184, NULL, 2, {{13, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"", "", "1", "", "",
  "",
  15,TRICK_VOID, 0, 0, 0, Language_CPP, 0,
  0, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL} };

} //extern "C"

namespace er7_utils {

void init_attrer7_utils__RKFehlberg78GeneralizedDerivSecondOrderODEIntegrator() {

    static int initialized ;
    if (initialized) {
        return;
    }
    initialized = 1;

    trick_MM->add_attr_info(std::string(attrer7_utils__RKFehlberg78GeneralizedDerivSecondOrderODEIntegrator[1].type_name) , &attrer7_utils__RKFehlberg78GeneralizedDerivSecondOrderODEIntegrator[1], __FILE__ , __LINE__ ) ;

    ATTRIBUTES temp_attr ;

    trick_MM->add_attr_info( std::string("er7_utils::RKFehlberg78SecondOrderODEIntegrator"), &temp_attr , __FILE__ , __LINE__ ) ;
    trick_MM->add_attr_info( std::string("er7_utils::Er7UtilsDeletable"), &temp_attr , __FILE__ , __LINE__ ) ;
}
}

extern "C" {

void init_attrer7_utils__RKFehlberg78GeneralizedDerivSecondOrderODEIntegrator_c_intf() {
    er7_utils::init_attrer7_utils__RKFehlberg78GeneralizedDerivSecondOrderODEIntegrator() ;
}

size_t io_src_sizeof_er7_utils__RKFehlberg78GeneralizedDerivSecondOrderODEIntegrator() {
    return sizeof(er7_utils::RKFehlberg78GeneralizedDerivSecondOrderODEIntegrator) ;
}

void* io_src_allocate_er7_utils__RKFehlberg78GeneralizedDerivSecondOrderODEIntegrator(int num) {
    er7_utils::RKFehlberg78GeneralizedDerivSecondOrderODEIntegrator* temp = (er7_utils::RKFehlberg78GeneralizedDerivSecondOrderODEIntegrator*)calloc(num, sizeof(er7_utils::RKFehlberg78GeneralizedDerivSecondOrderODEIntegrator));
    for (int ii = 0; ii < num; ++ii) {
        new(&temp[ii]) er7_utils::RKFehlberg78GeneralizedDerivSecondOrderODEIntegrator();
    }
    return (void*)temp;
}

void io_src_destruct_er7_utils__RKFehlberg78GeneralizedDerivSecondOrderODEIntegrator(void* address __attribute__((unused)), int num __attribute__((unused))) {
    using namespace er7_utils;
    er7_utils::RKFehlberg78GeneralizedDerivSecondOrderODEIntegrator* temp = (er7_utils::RKFehlberg78GeneralizedDerivSecondOrderODEIntegrator*)address;
    for (int ii = 0; ii < num; ++ii) {
        temp[ii].~RKFehlberg78GeneralizedDerivSecondOrderODEIntegrator();
    }
}

void io_src_delete_er7_utils__RKFehlberg78GeneralizedDerivSecondOrderODEIntegrator(void* address) {
    delete (er7_utils::RKFehlberg78GeneralizedDerivSecondOrderODEIntegrator*)address;
}

} //extern "C"

struct UnitsMaper7_utils__RKFehlberg78GeneralizedDerivSecondOrderODEIntegrator {
    UnitsMaper7_utils__RKFehlberg78GeneralizedDerivSecondOrderODEIntegrator() {
        Trick::UnitsMap* units_map_ptr = Trick::UnitsMap::units_map();
        units_map_ptr->add_param("RKFehlberg78GeneralizedDerivSecondOrderODEIntegrator_state_size", "1") ;
        units_map_ptr->add_param("RKFehlberg78GeneralizedDerivSecondOrderODEIntegrator_problem_type", "1") ;
        units_map_ptr->add_param("RKFehlberg78GeneralizedDerivSecondOrderODEIntegrator_init_pos", "1") ;
        units_map_ptr->add_param("RKFehlberg78GeneralizedDerivSecondOrderODEIntegrator_init_vel", "1") ;
        units_map_ptr->add_param("RKFehlberg78GeneralizedDerivSecondOrderODEIntegrator_dtheta", "1") ;
        units_map_ptr->add_param("RKFehlberg78GeneralizedDerivSecondOrderODEIntegrator_posdot_hist", "1") ;
        units_map_ptr->add_param("RKFehlberg78GeneralizedDerivSecondOrderODEIntegrator_veldot_hist", "1") ;
    }
} umer7_utils__RKFehlberg78GeneralizedDerivSecondOrderODEIntegrator;

extern "C" {

ATTRIBUTES attrer7_utils__RKFehlberg78GeneralizedStepSecondOrderODEIntegrator[] = {
{"state_size", "int", "1", "", "",
  "n The sizes of the generalized position and generalized velocity vectors.",
  15,TRICK_INTEGER, sizeof(int), 0, 0, Language_CPP, 4,
  40, NULL, 1, {{2, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"problem_type", "er7_utils::Integration::ODEProblemType", "1", "", "",
  "n The type of problem to be solved.",
  15,TRICK_ENUMERATED, 0, 0, 0, Language_CPP, 4,
  48, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"init_pos", "double", "1", "", "",
  "n Position at the start of an integration cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  56, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"init_vel", "double", "1", "", "",
  "n Velocity at the start of an integration cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  64, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"dtheta", "double", "1", "", "",
  "n Product of delta t and weighted sum of generalized velocities.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  72, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"posdot_hist", "double", "1", "", "",
  "n Position derivatives at each step in the integration cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  80, NULL, 2, {{13, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"veldot_hist", "double", "1", "", "",
  "n Velocity derivatives at each step in the integration cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  184, NULL, 2, {{13, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"", "", "1", "", "",
  "",
  15,TRICK_VOID, 0, 0, 0, Language_CPP, 0,
  0, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL} };

} //extern "C"

namespace er7_utils {

void init_attrer7_utils__RKFehlberg78GeneralizedStepSecondOrderODEIntegrator() {

    static int initialized ;
    if (initialized) {
        return;
    }
    initialized = 1;

    trick_MM->add_attr_info(std::string(attrer7_utils__RKFehlberg78GeneralizedStepSecondOrderODEIntegrator[1].type_name) , &attrer7_utils__RKFehlberg78GeneralizedStepSecondOrderODEIntegrator[1], __FILE__ , __LINE__ ) ;

    ATTRIBUTES temp_attr ;

    trick_MM->add_attr_info( std::string("er7_utils::RKFehlberg78SecondOrderODEIntegrator"), &temp_attr , __FILE__ , __LINE__ ) ;
    trick_MM->add_attr_info( std::string("er7_utils::Er7UtilsDeletable"), &temp_attr , __FILE__ , __LINE__ ) ;
}
}

extern "C" {

void init_attrer7_utils__RKFehlberg78GeneralizedStepSecondOrderODEIntegrator_c_intf() {
    er7_utils::init_attrer7_utils__RKFehlberg78GeneralizedStepSecondOrderODEIntegrator() ;
}

size_t io_src_sizeof_er7_utils__RKFehlberg78GeneralizedStepSecondOrderODEIntegrator() {
    return sizeof(er7_utils::RKFehlberg78GeneralizedStepSecondOrderODEIntegrator) ;
}

void* io_src_allocate_er7_utils__RKFehlberg78GeneralizedStepSecondOrderODEIntegrator(int num) {
    er7_utils::RKFehlberg78GeneralizedStepSecondOrderODEIntegrator* temp = (er7_utils::RKFehlberg78GeneralizedStepSecondOrderODEIntegrator*)calloc(num, sizeof(er7_utils::RKFehlberg78GeneralizedStepSecondOrderODEIntegrator));
    for (int ii = 0; ii < num; ++ii) {
        new(&temp[ii]) er7_utils::RKFehlberg78GeneralizedStepSecondOrderODEIntegrator();
    }
    return (void*)temp;
}

void io_src_destruct_er7_utils__RKFehlberg78GeneralizedStepSecondOrderODEIntegrator(void* address __attribute__((unused)), int num __attribute__((unused))) {
    using namespace er7_utils;
    er7_utils::RKFehlberg78GeneralizedStepSecondOrderODEIntegrator* temp = (er7_utils::RKFehlberg78GeneralizedStepSecondOrderODEIntegrator*)address;
    for (int ii = 0; ii < num; ++ii) {
        temp[ii].~RKFehlberg78GeneralizedStepSecondOrderODEIntegrator();
    }
}

void io_src_delete_er7_utils__RKFehlberg78GeneralizedStepSecondOrderODEIntegrator(void* address) {
    delete (er7_utils::RKFehlberg78GeneralizedStepSecondOrderODEIntegrator*)address;
}

} //extern "C"

struct UnitsMaper7_utils__RKFehlberg78GeneralizedStepSecondOrderODEIntegrator {
    UnitsMaper7_utils__RKFehlberg78GeneralizedStepSecondOrderODEIntegrator() {
        Trick::UnitsMap* units_map_ptr = Trick::UnitsMap::units_map();
        units_map_ptr->add_param("RKFehlberg78GeneralizedStepSecondOrderODEIntegrator_state_size", "1") ;
        units_map_ptr->add_param("RKFehlberg78GeneralizedStepSecondOrderODEIntegrator_problem_type", "1") ;
        units_map_ptr->add_param("RKFehlberg78GeneralizedStepSecondOrderODEIntegrator_init_pos", "1") ;
        units_map_ptr->add_param("RKFehlberg78GeneralizedStepSecondOrderODEIntegrator_init_vel", "1") ;
        units_map_ptr->add_param("RKFehlberg78GeneralizedStepSecondOrderODEIntegrator_dtheta", "1") ;
        units_map_ptr->add_param("RKFehlberg78GeneralizedStepSecondOrderODEIntegrator_posdot_hist", "1") ;
        units_map_ptr->add_param("RKFehlberg78GeneralizedStepSecondOrderODEIntegrator_veldot_hist", "1") ;
    }
} umer7_utils__RKFehlberg78GeneralizedStepSecondOrderODEIntegrator;

