/**
 * This file was automatically generated by the ICG based on the file:
 * /users/agirish/trick_tutorial/trick/trick_source/er7_utils/integration/beeman/include/beeman_second_order_ode_integrator.hh
 * This file contains database parameter declarations specific to the
 * data structures and enumerated types declared in the above file.
 * These database parameters are used by the Trick input and
 * data recording processors to gain access to important simulation
 * variable information.
 */

#define TRICK_IN_IOSRC
#include <stdlib.h>
#include "trick/MemoryManager.hh"
#include "trick/attributes.h"
#include "trick/parameter_types.h"
#include "trick/ClassSizeCheck.hh"
#include "trick/UnitsMap.hh"
#include "trick/checkpoint_stl.hh"
#include "/users/agirish/trick_tutorial/trick/trick_source/er7_utils/integration/beeman/include/beeman_second_order_ode_integrator.hh"

extern "C" {

ATTRIBUTES attrer7_utils__BeemanSecondOrderODEIntegrator[] = {
{"state_size", "int", "1", "", "",
  "n The sizes of the generalized position and generalized velocity vectors.",
  15,TRICK_INTEGER, sizeof(int), 0, 0, Language_CPP, 4,
  40, NULL, 1, {{2, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"problem_type", "er7_utils::Integration::ODEProblemType", "1", "", "",
  "n The type of problem to be solved.",
  15,TRICK_ENUMERATED, 0, 0, 0, Language_CPP, 4,
  48, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"controls", "er7_utils::IntegrationControls", "1", "", "",
  "n The integration controls object that controls this state integrator.",
  15,TRICK_STRUCTURED, 0, 0, 0, Language_CPP, 4,
  56, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"primer", "er7_utils::SecondOrderODEIntegrator", "1", "", "",
  "n The state integrator used to prime this integrator.",
  15,TRICK_STRUCTURED, 0, 0, 0, Language_CPP, 4,
  64, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"priming_state_size", "int", "1", "", "",
  "n The number of start of cycle derivatives needed by the technique.",
  15,TRICK_INTEGER, sizeof(int), 0, 0, Language_CPP, 4,
  72, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"prime_counter", "int", "1", "", "",
  "n Priming phase countdown. This is set to priming_state_size initially and upon reset. Priming is complete when the counter reaches zero.",
  15,TRICK_INTEGER, sizeof(int), 0, 0, Language_CPP, 4,
  76, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"primed", "bool", "1", "", "",
  "n Indicates whether the object has been primed. This is false initially and upon reset; it is set to true when priming is complete.",
  15,TRICK_BOOLEAN, sizeof(bool), 0, 0, Language_CPP, 4,
  80, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"init_vel", "double", "1", "", "",
  "n Velocity at the start of an integration cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  88, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"mean_vel", "double", "1", "", "",
  "n Velocity used to update position.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  96, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"init_acc", "double", "1", "", "",
  "n Acceleration at the start of an integration cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  104, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"prev_acc", "double", "1", "", "",
  "n Acceleration at the start of the previous integration cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  112, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"posdot", "double", "1", "", "",
  "n Position derivative at the current time step.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  120, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"posddot", "double", "1", "", "",
  "n Position 2nd derivative at the current time step.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  128, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"init_posddot", "double", "1", "", "",
  "n Position 2nd derivative at the start of an integration cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  136, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"prev_posddot", "double", "1", "", "",
  "n Position 2nd derivative at the start of the previous integration cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  144, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"", "", "1", "", "",
  "",
  15,TRICK_VOID, 0, 0, 0, Language_CPP, 0,
  0, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL} };

} //extern "C"

namespace er7_utils {

void init_attrer7_utils__BeemanSecondOrderODEIntegrator() {

    static int initialized ;
    if (initialized) {
        return;
    }
    initialized = 1;

    trick_MM->add_attr_info(std::string(attrer7_utils__BeemanSecondOrderODEIntegrator[1].type_name) , &attrer7_utils__BeemanSecondOrderODEIntegrator[1], __FILE__ , __LINE__ ) ;
    trick_MM->add_attr_info(std::string(attrer7_utils__BeemanSecondOrderODEIntegrator[2].type_name) , &attrer7_utils__BeemanSecondOrderODEIntegrator[2], __FILE__ , __LINE__ ) ;
    trick_MM->add_attr_info(std::string(attrer7_utils__BeemanSecondOrderODEIntegrator[3].type_name) , &attrer7_utils__BeemanSecondOrderODEIntegrator[3], __FILE__ , __LINE__ ) ;

    ATTRIBUTES temp_attr ;

    trick_MM->add_attr_info( std::string("er7_utils::PrimingSecondOrderODEIntegrator"), &temp_attr , __FILE__ , __LINE__ ) ;
    trick_MM->add_attr_info( std::string("er7_utils::Er7UtilsDeletable"), &temp_attr , __FILE__ , __LINE__ ) ;
}
}

extern "C" {

void init_attrer7_utils__BeemanSecondOrderODEIntegrator_c_intf() {
    er7_utils::init_attrer7_utils__BeemanSecondOrderODEIntegrator() ;
}

size_t io_src_sizeof_er7_utils__BeemanSecondOrderODEIntegrator() {
    return sizeof(er7_utils::BeemanSecondOrderODEIntegrator) ;
}

void io_src_destruct_er7_utils__BeemanSecondOrderODEIntegrator(void* address __attribute__((unused)), int num __attribute__((unused))) {
    using namespace er7_utils;
    er7_utils::BeemanSecondOrderODEIntegrator* temp = (er7_utils::BeemanSecondOrderODEIntegrator*)address;
    for (int ii = 0; ii < num; ++ii) {
        temp[ii].~BeemanSecondOrderODEIntegrator();
    }
}

void io_src_delete_er7_utils__BeemanSecondOrderODEIntegrator(void* address) {
    delete (er7_utils::BeemanSecondOrderODEIntegrator*)address;
}

} //extern "C"

struct UnitsMaper7_utils__BeemanSecondOrderODEIntegrator {
    UnitsMaper7_utils__BeemanSecondOrderODEIntegrator() {
        Trick::UnitsMap* units_map_ptr = Trick::UnitsMap::units_map();
        units_map_ptr->add_param("BeemanSecondOrderODEIntegrator_state_size", "1") ;
        units_map_ptr->add_param("BeemanSecondOrderODEIntegrator_problem_type", "1") ;
        units_map_ptr->add_param("BeemanSecondOrderODEIntegrator_controls", "1") ;
        units_map_ptr->add_param("BeemanSecondOrderODEIntegrator_primer", "1") ;
        units_map_ptr->add_param("BeemanSecondOrderODEIntegrator_priming_state_size", "1") ;
        units_map_ptr->add_param("BeemanSecondOrderODEIntegrator_prime_counter", "1") ;
        units_map_ptr->add_param("BeemanSecondOrderODEIntegrator_primed", "1") ;
        units_map_ptr->add_param("BeemanSecondOrderODEIntegrator_init_vel", "1") ;
        units_map_ptr->add_param("BeemanSecondOrderODEIntegrator_mean_vel", "1") ;
        units_map_ptr->add_param("BeemanSecondOrderODEIntegrator_init_acc", "1") ;
        units_map_ptr->add_param("BeemanSecondOrderODEIntegrator_prev_acc", "1") ;
        units_map_ptr->add_param("BeemanSecondOrderODEIntegrator_posdot", "1") ;
        units_map_ptr->add_param("BeemanSecondOrderODEIntegrator_posddot", "1") ;
        units_map_ptr->add_param("BeemanSecondOrderODEIntegrator_init_posddot", "1") ;
        units_map_ptr->add_param("BeemanSecondOrderODEIntegrator_prev_posddot", "1") ;
    }
} umer7_utils__BeemanSecondOrderODEIntegrator;

extern "C" {

ATTRIBUTES attrer7_utils__BeemanSimpleSecondOrderODEIntegrator[] = {
{"state_size", "int", "1", "", "",
  "n The sizes of the generalized position and generalized velocity vectors.",
  15,TRICK_INTEGER, sizeof(int), 0, 0, Language_CPP, 4,
  40, NULL, 1, {{2, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"problem_type", "er7_utils::Integration::ODEProblemType", "1", "", "",
  "n The type of problem to be solved.",
  15,TRICK_ENUMERATED, 0, 0, 0, Language_CPP, 4,
  48, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"controls", "er7_utils::IntegrationControls", "1", "", "",
  "n The integration controls object that controls this state integrator.",
  15,TRICK_STRUCTURED, 0, 0, 0, Language_CPP, 4,
  56, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"primer", "er7_utils::SecondOrderODEIntegrator", "1", "", "",
  "n The state integrator used to prime this integrator.",
  15,TRICK_STRUCTURED, 0, 0, 0, Language_CPP, 4,
  64, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"priming_state_size", "int", "1", "", "",
  "n The number of start of cycle derivatives needed by the technique.",
  15,TRICK_INTEGER, sizeof(int), 0, 0, Language_CPP, 4,
  72, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"prime_counter", "int", "1", "", "",
  "n Priming phase countdown. This is set to priming_state_size initially and upon reset. Priming is complete when the counter reaches zero.",
  15,TRICK_INTEGER, sizeof(int), 0, 0, Language_CPP, 4,
  76, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"primed", "bool", "1", "", "",
  "n Indicates whether the object has been primed. This is false initially and upon reset; it is set to true when priming is complete.",
  15,TRICK_BOOLEAN, sizeof(bool), 0, 0, Language_CPP, 4,
  80, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"init_vel", "double", "1", "", "",
  "n Velocity at the start of an integration cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  88, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"mean_vel", "double", "1", "", "",
  "n Velocity used to update position.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  96, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"init_acc", "double", "1", "", "",
  "n Acceleration at the start of an integration cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  104, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"prev_acc", "double", "1", "", "",
  "n Acceleration at the start of the previous integration cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  112, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"posdot", "double", "1", "", "",
  "n Position derivative at the current time step.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  120, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"posddot", "double", "1", "", "",
  "n Position 2nd derivative at the current time step.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  128, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"init_posddot", "double", "1", "", "",
  "n Position 2nd derivative at the start of an integration cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  136, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"prev_posddot", "double", "1", "", "",
  "n Position 2nd derivative at the start of the previous integration cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  144, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"", "", "1", "", "",
  "",
  15,TRICK_VOID, 0, 0, 0, Language_CPP, 0,
  0, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL} };

} //extern "C"

namespace er7_utils {

void init_attrer7_utils__BeemanSimpleSecondOrderODEIntegrator() {

    static int initialized ;
    if (initialized) {
        return;
    }
    initialized = 1;

    trick_MM->add_attr_info(std::string(attrer7_utils__BeemanSimpleSecondOrderODEIntegrator[1].type_name) , &attrer7_utils__BeemanSimpleSecondOrderODEIntegrator[1], __FILE__ , __LINE__ ) ;
    trick_MM->add_attr_info(std::string(attrer7_utils__BeemanSimpleSecondOrderODEIntegrator[2].type_name) , &attrer7_utils__BeemanSimpleSecondOrderODEIntegrator[2], __FILE__ , __LINE__ ) ;
    trick_MM->add_attr_info(std::string(attrer7_utils__BeemanSimpleSecondOrderODEIntegrator[3].type_name) , &attrer7_utils__BeemanSimpleSecondOrderODEIntegrator[3], __FILE__ , __LINE__ ) ;

    ATTRIBUTES temp_attr ;

    trick_MM->add_attr_info( std::string("er7_utils::BeemanSecondOrderODEIntegrator"), &temp_attr , __FILE__ , __LINE__ ) ;
    trick_MM->add_attr_info( std::string("er7_utils::Er7UtilsDeletable"), &temp_attr , __FILE__ , __LINE__ ) ;
}
}

extern "C" {

void init_attrer7_utils__BeemanSimpleSecondOrderODEIntegrator_c_intf() {
    er7_utils::init_attrer7_utils__BeemanSimpleSecondOrderODEIntegrator() ;
}

size_t io_src_sizeof_er7_utils__BeemanSimpleSecondOrderODEIntegrator() {
    return sizeof(er7_utils::BeemanSimpleSecondOrderODEIntegrator) ;
}

void* io_src_allocate_er7_utils__BeemanSimpleSecondOrderODEIntegrator(int num) {
    er7_utils::BeemanSimpleSecondOrderODEIntegrator* temp = (er7_utils::BeemanSimpleSecondOrderODEIntegrator*)calloc(num, sizeof(er7_utils::BeemanSimpleSecondOrderODEIntegrator));
    for (int ii = 0; ii < num; ++ii) {
        new(&temp[ii]) er7_utils::BeemanSimpleSecondOrderODEIntegrator();
    }
    return (void*)temp;
}

void io_src_destruct_er7_utils__BeemanSimpleSecondOrderODEIntegrator(void* address __attribute__((unused)), int num __attribute__((unused))) {
    using namespace er7_utils;
    er7_utils::BeemanSimpleSecondOrderODEIntegrator* temp = (er7_utils::BeemanSimpleSecondOrderODEIntegrator*)address;
    for (int ii = 0; ii < num; ++ii) {
        temp[ii].~BeemanSimpleSecondOrderODEIntegrator();
    }
}

void io_src_delete_er7_utils__BeemanSimpleSecondOrderODEIntegrator(void* address) {
    delete (er7_utils::BeemanSimpleSecondOrderODEIntegrator*)address;
}

} //extern "C"

struct UnitsMaper7_utils__BeemanSimpleSecondOrderODEIntegrator {
    UnitsMaper7_utils__BeemanSimpleSecondOrderODEIntegrator() {
        Trick::UnitsMap* units_map_ptr = Trick::UnitsMap::units_map();
        units_map_ptr->add_param("BeemanSimpleSecondOrderODEIntegrator_state_size", "1") ;
        units_map_ptr->add_param("BeemanSimpleSecondOrderODEIntegrator_problem_type", "1") ;
        units_map_ptr->add_param("BeemanSimpleSecondOrderODEIntegrator_controls", "1") ;
        units_map_ptr->add_param("BeemanSimpleSecondOrderODEIntegrator_primer", "1") ;
        units_map_ptr->add_param("BeemanSimpleSecondOrderODEIntegrator_priming_state_size", "1") ;
        units_map_ptr->add_param("BeemanSimpleSecondOrderODEIntegrator_prime_counter", "1") ;
        units_map_ptr->add_param("BeemanSimpleSecondOrderODEIntegrator_primed", "1") ;
        units_map_ptr->add_param("BeemanSimpleSecondOrderODEIntegrator_init_vel", "1") ;
        units_map_ptr->add_param("BeemanSimpleSecondOrderODEIntegrator_mean_vel", "1") ;
        units_map_ptr->add_param("BeemanSimpleSecondOrderODEIntegrator_init_acc", "1") ;
        units_map_ptr->add_param("BeemanSimpleSecondOrderODEIntegrator_prev_acc", "1") ;
        units_map_ptr->add_param("BeemanSimpleSecondOrderODEIntegrator_posdot", "1") ;
        units_map_ptr->add_param("BeemanSimpleSecondOrderODEIntegrator_posddot", "1") ;
        units_map_ptr->add_param("BeemanSimpleSecondOrderODEIntegrator_init_posddot", "1") ;
        units_map_ptr->add_param("BeemanSimpleSecondOrderODEIntegrator_prev_posddot", "1") ;
    }
} umer7_utils__BeemanSimpleSecondOrderODEIntegrator;

extern "C" {

ATTRIBUTES attrer7_utils__BeemanGeneralizedDerivSecondOrderODEIntegrator[] = {
{"state_size", "int", "1", "", "",
  "n The sizes of the generalized position and generalized velocity vectors.",
  15,TRICK_INTEGER, sizeof(int), 0, 0, Language_CPP, 4,
  40, NULL, 1, {{2, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"problem_type", "er7_utils::Integration::ODEProblemType", "1", "", "",
  "n The type of problem to be solved.",
  15,TRICK_ENUMERATED, 0, 0, 0, Language_CPP, 4,
  48, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"controls", "er7_utils::IntegrationControls", "1", "", "",
  "n The integration controls object that controls this state integrator.",
  15,TRICK_STRUCTURED, 0, 0, 0, Language_CPP, 4,
  56, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"primer", "er7_utils::SecondOrderODEIntegrator", "1", "", "",
  "n The state integrator used to prime this integrator.",
  15,TRICK_STRUCTURED, 0, 0, 0, Language_CPP, 4,
  64, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"priming_state_size", "int", "1", "", "",
  "n The number of start of cycle derivatives needed by the technique.",
  15,TRICK_INTEGER, sizeof(int), 0, 0, Language_CPP, 4,
  72, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"prime_counter", "int", "1", "", "",
  "n Priming phase countdown. This is set to priming_state_size initially and upon reset. Priming is complete when the counter reaches zero.",
  15,TRICK_INTEGER, sizeof(int), 0, 0, Language_CPP, 4,
  76, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"primed", "bool", "1", "", "",
  "n Indicates whether the object has been primed. This is false initially and upon reset; it is set to true when priming is complete.",
  15,TRICK_BOOLEAN, sizeof(bool), 0, 0, Language_CPP, 4,
  80, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"init_vel", "double", "1", "", "",
  "n Velocity at the start of an integration cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  88, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"mean_vel", "double", "1", "", "",
  "n Velocity used to update position.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  96, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"init_acc", "double", "1", "", "",
  "n Acceleration at the start of an integration cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  104, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"prev_acc", "double", "1", "", "",
  "n Acceleration at the start of the previous integration cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  112, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"posdot", "double", "1", "", "",
  "n Position derivative at the current time step.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  120, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"posddot", "double", "1", "", "",
  "n Position 2nd derivative at the current time step.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  128, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"init_posddot", "double", "1", "", "",
  "n Position 2nd derivative at the start of an integration cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  136, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"prev_posddot", "double", "1", "", "",
  "n Position 2nd derivative at the start of the previous integration cycle.",
  15,TRICK_DOUBLE, sizeof(double), 0, 0, Language_CPP, 4,
  144, NULL, 1, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"", "", "1", "", "",
  "",
  15,TRICK_VOID, 0, 0, 0, Language_CPP, 0,
  0, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL} };

} //extern "C"

namespace er7_utils {

void init_attrer7_utils__BeemanGeneralizedDerivSecondOrderODEIntegrator() {

    static int initialized ;
    if (initialized) {
        return;
    }
    initialized = 1;

    trick_MM->add_attr_info(std::string(attrer7_utils__BeemanGeneralizedDerivSecondOrderODEIntegrator[1].type_name) , &attrer7_utils__BeemanGeneralizedDerivSecondOrderODEIntegrator[1], __FILE__ , __LINE__ ) ;
    trick_MM->add_attr_info(std::string(attrer7_utils__BeemanGeneralizedDerivSecondOrderODEIntegrator[2].type_name) , &attrer7_utils__BeemanGeneralizedDerivSecondOrderODEIntegrator[2], __FILE__ , __LINE__ ) ;
    trick_MM->add_attr_info(std::string(attrer7_utils__BeemanGeneralizedDerivSecondOrderODEIntegrator[3].type_name) , &attrer7_utils__BeemanGeneralizedDerivSecondOrderODEIntegrator[3], __FILE__ , __LINE__ ) ;

    ATTRIBUTES temp_attr ;

    trick_MM->add_attr_info( std::string("er7_utils::BeemanSecondOrderODEIntegrator"), &temp_attr , __FILE__ , __LINE__ ) ;
    trick_MM->add_attr_info( std::string("er7_utils::Er7UtilsDeletable"), &temp_attr , __FILE__ , __LINE__ ) ;
}
}

extern "C" {

void init_attrer7_utils__BeemanGeneralizedDerivSecondOrderODEIntegrator_c_intf() {
    er7_utils::init_attrer7_utils__BeemanGeneralizedDerivSecondOrderODEIntegrator() ;
}

size_t io_src_sizeof_er7_utils__BeemanGeneralizedDerivSecondOrderODEIntegrator() {
    return sizeof(er7_utils::BeemanGeneralizedDerivSecondOrderODEIntegrator) ;
}

void* io_src_allocate_er7_utils__BeemanGeneralizedDerivSecondOrderODEIntegrator(int num) {
    er7_utils::BeemanGeneralizedDerivSecondOrderODEIntegrator* temp = (er7_utils::BeemanGeneralizedDerivSecondOrderODEIntegrator*)calloc(num, sizeof(er7_utils::BeemanGeneralizedDerivSecondOrderODEIntegrator));
    for (int ii = 0; ii < num; ++ii) {
        new(&temp[ii]) er7_utils::BeemanGeneralizedDerivSecondOrderODEIntegrator();
    }
    return (void*)temp;
}

void io_src_destruct_er7_utils__BeemanGeneralizedDerivSecondOrderODEIntegrator(void* address __attribute__((unused)), int num __attribute__((unused))) {
    using namespace er7_utils;
    er7_utils::BeemanGeneralizedDerivSecondOrderODEIntegrator* temp = (er7_utils::BeemanGeneralizedDerivSecondOrderODEIntegrator*)address;
    for (int ii = 0; ii < num; ++ii) {
        temp[ii].~BeemanGeneralizedDerivSecondOrderODEIntegrator();
    }
}

void io_src_delete_er7_utils__BeemanGeneralizedDerivSecondOrderODEIntegrator(void* address) {
    delete (er7_utils::BeemanGeneralizedDerivSecondOrderODEIntegrator*)address;
}

} //extern "C"

struct UnitsMaper7_utils__BeemanGeneralizedDerivSecondOrderODEIntegrator {
    UnitsMaper7_utils__BeemanGeneralizedDerivSecondOrderODEIntegrator() {
        Trick::UnitsMap* units_map_ptr = Trick::UnitsMap::units_map();
        units_map_ptr->add_param("BeemanGeneralizedDerivSecondOrderODEIntegrator_state_size", "1") ;
        units_map_ptr->add_param("BeemanGeneralizedDerivSecondOrderODEIntegrator_problem_type", "1") ;
        units_map_ptr->add_param("BeemanGeneralizedDerivSecondOrderODEIntegrator_controls", "1") ;
        units_map_ptr->add_param("BeemanGeneralizedDerivSecondOrderODEIntegrator_primer", "1") ;
        units_map_ptr->add_param("BeemanGeneralizedDerivSecondOrderODEIntegrator_priming_state_size", "1") ;
        units_map_ptr->add_param("BeemanGeneralizedDerivSecondOrderODEIntegrator_prime_counter", "1") ;
        units_map_ptr->add_param("BeemanGeneralizedDerivSecondOrderODEIntegrator_primed", "1") ;
        units_map_ptr->add_param("BeemanGeneralizedDerivSecondOrderODEIntegrator_init_vel", "1") ;
        units_map_ptr->add_param("BeemanGeneralizedDerivSecondOrderODEIntegrator_mean_vel", "1") ;
        units_map_ptr->add_param("BeemanGeneralizedDerivSecondOrderODEIntegrator_init_acc", "1") ;
        units_map_ptr->add_param("BeemanGeneralizedDerivSecondOrderODEIntegrator_prev_acc", "1") ;
        units_map_ptr->add_param("BeemanGeneralizedDerivSecondOrderODEIntegrator_posdot", "1") ;
        units_map_ptr->add_param("BeemanGeneralizedDerivSecondOrderODEIntegrator_posddot", "1") ;
        units_map_ptr->add_param("BeemanGeneralizedDerivSecondOrderODEIntegrator_init_posddot", "1") ;
        units_map_ptr->add_param("BeemanGeneralizedDerivSecondOrderODEIntegrator_prev_posddot", "1") ;
    }
} umer7_utils__BeemanGeneralizedDerivSecondOrderODEIntegrator;

